{"version":3,"sources":["componentTypes.js","useResults.js","ResultsTable.js","makeTestComponent.js","TestSandbox.js","App.js","index.js"],"names":["componentTypes","resultsReducer","state","action","componentType","maxDepth","updateTime","existingMaxDepth","existingComponentType","existingTestsCount","testsCount","existingMean","mean","Object","objectSpread","defineProperty","useResults","_useReducer","useReducer","_useReducer2","slicedToArray","results","addMeasurement","ResultsTable","_ref","rows","entries","map","_ref2","_ref3","result","react_default","a","createElement","key","type","length","makeTestComponent","BaseComponent","_class","_temp","_BaseComponent","TestComponent","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","_this$props","props","depthLevel","shouldChangeChildProp","childrenNumber","Math","floor","random","children","toConsumableArray","Array","_","i","drawLots","arbitraryProp1","arbitraryProp2","arbitraryProp3","style","marginLeft","name","propTypes","PropTypes","number","isRequired","bool","defaultProps","magicSauce","undefined","TestSandbox","randomProp","testing","_this","toggleTesting","setState","mounted","start","performance","now","prevProps","prevState","_this2","requestAnimationFrame","Fragment","onClick","PureComponent","App","_useState","useState","_useState2","setMaxDepth","_useState3","_useState4","setComponentType","_useResults","onChange","e","target","App_ComponentTypeRadio","checked","src_ResultsTable","TestSandbox_TestSandbox","React","ComponentTypeRadio","objectWithoutProperties","assign","ReactDOM","render","src_App","document","getElementById"],"mappings":"wLAAeA,EAAA,CAAC,YAAa,+BCEvBC,EAAiB,SAACC,EAAOC,GAAW,IAChCC,EAAwCD,EAAxCC,cAAeC,EAAyBF,EAAzBE,SAAUC,EAAeH,EAAfG,WAC3BC,EAAmBL,EAAMG,IAAa,GACtCG,EAAwBD,EAAiBH,IAAkB,GAC3DK,EAAqBD,EAAsBE,YAAc,EACzDC,EAAeH,EAAsBI,MAAQ,EAEnD,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFX,EADLW,OAAAE,EAAA,EAAAF,CAAA,GAEGR,EAFHQ,OAAAC,EAAA,EAAAD,CAAA,GAGON,EAHPM,OAAAE,EAAA,EAAAF,CAAA,GAIKT,EAJLS,OAAAC,EAAA,EAAAD,CAAA,GAKSL,EALT,CAMME,WAAYD,EAAqB,EACjCG,MAAOD,EAAeF,EAAqBH,IAAeG,EAAqB,UAYxEO,EANI,WAAM,IAAAC,EACWC,qBAAWjB,EAAgB,IADtCkB,EAAAN,OAAAO,EAAA,EAAAP,CAAAI,EAAA,GAGvB,MAAO,CAAEI,QAHcF,EAAA,GAGLG,eAHKH,EAAA,KCOVI,EAzBM,SAAAC,GAAiB,IAAdH,EAAcG,EAAdH,QAChBI,EAAOZ,OAAOa,QAAQL,GAASM,IAAI,SAAAC,GAAA,IAAAC,EAAAhB,OAAAO,EAAA,EAAAP,CAAAe,EAAA,GAAEvB,EAAFwB,EAAA,GAAYC,EAAZD,EAAA,UACvCE,EAAAC,EAAAC,cAAA,MAAIC,IAAK7B,GACP0B,EAAAC,EAAAC,cAAA,UAAK5B,GACJL,EAAe2B,IAAI,SAAAQ,GAAI,OAAIJ,EAAAC,EAAAC,cAAA,MAAIC,IAAKC,GAAOL,EAAOK,GAAQL,EAAOK,GAAMvB,KAAO,UAInF,OAAKa,EAAKW,OAGRL,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,4BACCjC,EAAe2B,IAAI,SAAAQ,GAAI,OAAIJ,EAAAC,EAAAC,cAAA,MAAIC,IAAKC,GAAOA,OAG9CJ,EAAAC,EAAAC,cAAA,aACCR,IAXoB,iECPZY,EAAA,SAAAC,GAAa,IAAAC,EAAAC,EAAA,OAAAA,EAAAD,EAAA,SAAAE,GAAA,SAAAC,IAAA,OAAA7B,OAAA8B,EAAA,EAAA9B,CAAA+B,KAAAF,GAAA7B,OAAAgC,EAAA,EAAAhC,CAAA+B,KAAA/B,OAAAiC,EAAA,EAAAjC,CAAA6B,GAAAK,MAAAH,KAAAI,YAAA,OAAAnC,OAAAoC,EAAA,EAAApC,CAAA6B,EAAAD,GAAA5B,OAAAqC,EAAA,EAAArC,CAAA6B,EAAA,EAAAR,IAAA,SAAAiB,MAAA,WAYjB,IAAAC,EACiDR,KAAKS,MAArDC,EADDF,EACCE,WAAYjD,EADb+C,EACa/C,SAAUkD,EADvBH,EACuBG,sBACxBC,EAAiBC,KAAKC,MAhBJ,EAgBUD,KAAKE,SAAiC,GAClEC,EAAWN,EAAajD,EAC5BQ,OAAAgD,EAAA,EAAAhD,CAAIiD,MAAMN,IAAiB7B,IAAI,SAACoC,EAAGC,GAAJ,OAC7BjC,EAAAC,EAAAC,cAACS,EAAD,CACER,IAAK8B,EACLV,WAAYA,EAAa,EACzBjD,SAAUA,EACVkD,sBAAuBA,GAAyBU,EAAS5D,GACzD6D,eAAe,MACfC,eAAe,MACfC,eAAe,UAGnB,KAEF,OACErC,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,WAAY,IACvBhC,EAAciC,KADjB,aACiCjB,EAC9BC,EACC,oCACA,sCACDK,OAnCmBlB,EAAA,CAAgCJ,GAAhCC,EACnBiC,UAAY,CACjBlB,WAAYmB,IAAUC,OACtBrE,SAAUoE,IAAUC,OAAOC,WAC3BpB,sBAAuBkB,IAAUG,MAJTrC,EAOnBsC,aAAe,CACpBvB,WAAY,EACZC,uBAAuB,GATCf,GAyCtByB,EAAW,eAACa,EAAD9B,UAAAZ,OAAA,QAAA2C,IAAA/B,UAAA,GAAAA,UAAA,GAAc,EAAd,OAAoBS,KAAKE,SAAW,EAAImB,GCzCpCE,6MAOnB9E,MAAQ,CACN+E,WAAYxB,KAAKE,SACjBuB,SAAS,KAGXxC,cAAgBL,EAAkB8C,EAAK9B,MAAMf,iBAqC7C8C,cAAgB,kBAAMD,EAAKE,SAAS,SAAA7D,GAAA,MAAkB,CAAE0D,SAApB1D,EAAG0D,+FAlCrCtC,KAAK0C,SAAU,gDAIf1C,KAAK2C,MAAQC,YAAYC,iDAGRC,EAAWC,GAAW,IAAAC,EAAAhD,KAMvC,GAJE8C,EAAUpD,gBAAkBM,KAAKS,MAAMf,eACvCoD,EAAUrF,WAAauC,KAAKS,MAAMhD,UAClCqF,EAAUpE,iBAAmBsB,KAAKS,MAAM/B,eAEf,CACzB,IAAMhB,EAAakF,YAAYC,MAAQ7C,KAAK2C,MAE5C3C,KAAKS,MAAM/B,eAAe,CACxBjB,SAAUuC,KAAKS,MAAMhD,SACrBD,cAAewC,KAAKS,MAAMf,cAAciC,KACxCjE,eAIAsC,KAAK1C,MAAMgF,SACbW,sBAAsB,WAChBD,EAAKN,SAASM,EAAKP,SAAS,CAAEJ,WAAYxB,KAAKE,4DAMvDf,KAAK0C,SAAU,mCAMf,IAAM5C,EAAgBE,KAAKF,cAE3B,OACEX,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACE/D,EAAAC,EAAAC,cAAA,UAAQ8D,QAASnD,KAAKwC,eACnBxC,KAAK1C,MAAMgF,QAAU,aAAe,WAEvCnD,EAAAC,EAAAC,cAACS,EAAD,CAAerC,SAAUuC,KAAKS,MAAMhD,SAAU4E,WAAYrC,KAAK1C,MAAM+E,qBA3DpCe,iBC0C1BC,EAtCH,WAAM,IAAAC,EACgBC,mBAAS,GADzBC,EAAAvF,OAAAO,EAAA,EAAAP,CAAAqF,EAAA,GACT7F,EADS+F,EAAA,GACCC,EADDD,EAAA,GAAAE,EAE0BH,mBAASnG,EAAe,IAFlDuG,EAAA1F,OAAAO,EAAA,EAAAP,CAAAyF,EAAA,GAETlG,EAFSmG,EAAA,GAEMC,EAFND,EAAA,GAAAE,EAGoBzF,IAA5BK,EAHQoF,EAGRpF,QAASC,EAHDmF,EAGCnF,eAEjB,OACES,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACE/D,EAAAC,EAAAC,cAAA,gBACEF,EAAAC,EAAAC,cAAA,8BAEEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASgB,MAAO9C,EAAUqG,SAAU,SAAAC,GAAC,OAAIN,GAAaM,EAAEC,OAAOzD,UAC1E9C,EAbQ,EAagB,SAAM,OAInC0B,EAAAC,EAAAC,cAAA,gBACGjC,EAAe2B,IAAI,SAAAQ,GAAI,OACtBJ,EAAAC,EAAAC,cAAC4E,EAAD,CACE3E,IAAKC,EACLA,KAAMA,EACN2E,QAAS3E,IAAS/B,EAClBsG,SAAU,SAAAC,GAAC,OAAIH,EAAiBG,EAAEC,OAAOzD,aAK/CpB,EAAAC,EAAAC,cAAC8E,EAAD,CAAc1F,QAASA,IAEvBU,EAAAC,EAAAC,cAAC+E,EAAD,CACE9E,IAAK9B,EAAgBC,EACrBiC,cAAe2E,IAAM7G,GACrBC,SAAUA,EACViB,eAAgBA,MAQlB4F,EAAqB,SAAA1F,GAAA,IAAGW,EAAHX,EAAGW,KAASkB,EAAZxC,OAAAsG,EAAA,EAAAtG,CAAAW,EAAA,iBACzBO,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,QAAApB,OAAAuG,OAAA,CAAOjF,KAAK,QAAQoC,KAAK,YAAYpB,MAAOhB,GAAUkB,IAA7D,IAAwElB,IC7C1EkF,IAASC,OAAOvF,EAAAC,EAAAC,cAACsF,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.f778ebae.chunk.js","sourcesContent":["export default ['Component', 'PureComponent']","import { useReducer } from 'react'\r\n\r\nconst resultsReducer = (state, action) => {\r\n  const { componentType, maxDepth, updateTime } = action\r\n  const existingMaxDepth = state[maxDepth] || {}\r\n  const existingComponentType = existingMaxDepth[componentType] || {}\r\n  const existingTestsCount = existingComponentType.testsCount || 0\r\n  const existingMean = existingComponentType.mean || 0\r\n\r\n  return {\r\n    ...state,\r\n    [maxDepth]: {\r\n      ...existingMaxDepth,\r\n      [componentType]: {\r\n        ...existingComponentType,\r\n        testsCount: existingTestsCount + 1,\r\n        mean: (existingMean * existingTestsCount + updateTime) / (existingTestsCount + 1),\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst useResults = () => {\r\n  const [results, addMeasurement] = useReducer(resultsReducer, {})\r\n\r\n  return { results, addMeasurement }\r\n}\r\n\r\nexport default useResults","import React from 'react'\r\n\r\nimport componentTypes from './componentTypes'\r\n\r\nconst ResultsTable = ({ results }) => {\r\n  const rows = Object.entries(results).map(([maxDepth, result]) =>\r\n    <tr key={maxDepth}>\r\n      <th>{maxDepth}</th>\r\n      {componentTypes.map(type => <td key={type}>{result[type] ? result[type].mean : '-'}</td>)}\r\n    </tr>\r\n  )\r\n\r\n  if (!rows.length) return null\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n      <tr>\r\n        <th>Max tree depth</th>\r\n        {componentTypes.map(type => <th key={type}>{type}</th>)}\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      {rows}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default ResultsTable","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst MAX_CHILDREN_NUMBER = 4\r\n\r\nexport default BaseComponent => class TestComponent extends BaseComponent {\r\n  static propTypes = {\r\n    depthLevel: PropTypes.number,\r\n    maxDepth: PropTypes.number.isRequired,\r\n    shouldChangeChildProp: PropTypes.bool, // If a component doesn't change its props, neither will its children do it\r\n  }\r\n\r\n  static defaultProps = {\r\n    depthLevel: 0,\r\n    shouldChangeChildProp: true,\r\n  }\r\n\r\n  render() {\r\n    const { depthLevel, maxDepth, shouldChangeChildProp } = this.props\r\n    const childrenNumber = Math.floor(Math.random() * MAX_CHILDREN_NUMBER + 1)\r\n    const children = depthLevel < maxDepth ?\r\n      [...Array(childrenNumber)].map((_, i) => (\r\n        <TestComponent\r\n          key={i}\r\n          depthLevel={depthLevel + 1}\r\n          maxDepth={maxDepth}\r\n          shouldChangeChildProp={shouldChangeChildProp && drawLots(maxDepth)} // The deeper in the tree, the higher the chance of having a change in a prop\r\n          arbitraryProp1=\"abc\" // This is to add some average work to PureComponent's shallow compare\r\n          arbitraryProp2=\"abc\"\r\n          arbitraryProp3=\"abc\"\r\n        />\r\n      )) :\r\n      null\r\n\r\n    return (\r\n      <div style={{ marginLeft: 5 }}>\r\n        {BaseComponent.name} of level {depthLevel}\r\n        {shouldChangeChildProp ?\r\n          ' which may change childrens\\' prop' :\r\n          ' which won\\'t change childrens\\' prop'}\r\n        {children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst drawLots = (magicSauce = 2) => Math.random() > 1 / magicSauce","import React, { PureComponent } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport makeTestComponent from './makeTestComponent'\r\n\r\nexport default class TestSandbox extends PureComponent {\r\n  static propTypes = {\r\n    BaseComponent: PropTypes.func.isRequired,\r\n    maxDepth: PropTypes.number.isRequired,\r\n    addMeasurement: PropTypes.func.isRequired,\r\n  }\r\n\r\n  state = {\r\n    randomProp: Math.random(),\r\n    testing: false,\r\n  }\r\n\r\n  TestComponent = makeTestComponent(this.props.BaseComponent)\r\n\r\n  componentDidMount() {\r\n    this.mounted = true\r\n  }\r\n\r\n  componentWillUpdate() {\r\n    this.start = performance.now()\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const shouldSaveMeasurement =\r\n      prevProps.BaseComponent === this.props.BaseComponent &&\r\n      prevProps.maxDepth === this.props.maxDepth &&\r\n      prevProps.addMeasurement === this.props.addMeasurement\r\n\r\n    if (shouldSaveMeasurement) {\r\n      const updateTime = performance.now() - this.start\r\n\r\n      this.props.addMeasurement({\r\n        maxDepth: this.props.maxDepth,\r\n        componentType: this.props.BaseComponent.name,\r\n        updateTime,\r\n      })\r\n    }\r\n\r\n    if (this.state.testing) {\r\n      requestAnimationFrame(() => {\r\n        if (this.mounted) this.setState({ randomProp: Math.random() })\r\n      })\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.mounted = false\r\n  }\r\n\r\n  toggleTesting = () => this.setState(({ testing }) => ({ testing: !testing }))\r\n\r\n  render() {\r\n    const TestComponent = this.TestComponent\r\n\r\n    return (\r\n      <>\r\n        <button onClick={this.toggleTesting}>\r\n          {this.state.testing ? 'Testing...' : 'Test it'}\r\n        </button>\r\n        <TestComponent maxDepth={this.props.maxDepth} randomProp={this.state.randomProp} />\r\n      </>\r\n    )\r\n  }\r\n}","import React, { useState } from 'react';\r\n\r\nimport componentTypes from './componentTypes'\r\nimport useResults from './useResults'\r\nimport ResultsTable from './ResultsTable'\r\nimport TestSandbox from './TestSandbox'\r\n\r\nconst HIGH_DEPTH = 8\r\n\r\nconst App = () => {\r\n  const [maxDepth, setMaxDepth] = useState(4)\r\n  const [componentType, setComponentType] = useState(componentTypes[0])\r\n  const { results, addMeasurement } = useResults()\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <label>\r\n          Max tree depth\r\n          <input type=\"number\" value={maxDepth} onChange={e => setMaxDepth(+e.target.value)} />\r\n          {maxDepth > HIGH_DEPTH ? '☠' : null}\r\n        </label>\r\n      </fieldset>\r\n\r\n      <fieldset>\r\n        {componentTypes.map(type => (\r\n          <ComponentTypeRadio\r\n            key={type}\r\n            type={type}\r\n            checked={type === componentType}\r\n            onChange={e => setComponentType(e.target.value)}\r\n          />\r\n        ))}\r\n      </fieldset>\r\n\r\n      <ResultsTable results={results} />\r\n\r\n      <TestSandbox\r\n        key={componentType + maxDepth}\r\n        BaseComponent={React[componentType]}\r\n        maxDepth={maxDepth}\r\n        addMeasurement={addMeasurement}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nconst ComponentTypeRadio = ({ type, ...props }) =>\r\n  <label><input type=\"radio\" name=\"component\" value={type} {...props} /> {type}</label>","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}